pipeline {
    agent any

    environment {
        EMAIL_RECIPIENT = 'dasankalana3@gmail.com'
    }

    stages {
        stage('Build') {
            steps {
                // Replace with your build commands, e.g., Maven or Gradle
                echo 'Building the code...'
                sh './build.sh'  // Example build script
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                // Replace with your test commands, e.g., JUnit, TestNG
                echo 'Running unit and integration tests...'
                sh './run-tests.sh'  // Example test script
            }
        }
        stage('Code Analysis') {
            steps {
                // Replace with your code analysis tool, e.g., SonarQube
                echo 'Performing code analysis...'
                sh './code-analysis.sh'  // Example code analysis script
            }
        }
        stage('Security Scan') {
            steps {
                // Replace with your security scan tool, e.g., OWASP ZAP
                echo 'Performing security scan...'
                sh './security-scan.sh'  // Example security scan script
            }
        }
        stage('Deploy to Staging') {
            steps {
                // Replace with your deployment commands to staging server
                echo 'Deploying to staging server...'
                sh './deploy-staging.sh'  // Example deployment script
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                // Replace with your integration test commands for staging
                echo 'Running integration tests on staging...'
                sh './integration-tests-staging.sh'  // Example integration tests script
            }
        }
        stage('Deploy to Production') {
            steps {
                // Replace with your deployment commands to production server
                echo 'Deploying to production server...'
                sh './deploy-production.sh'  // Example deployment script
            }
        }
    }

    post {
        always {
            script {
                def buildLog = currentBuild.rawBuild.getLog(100) // Adjust the number of lines as needed
                def emailSubject = "Build ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}"
                def emailBody = """\
                    Build ${currentBuild.fullDisplayName} has finished with status ${currentBuild.currentResult}.
                    Please find the attached logs for details.
                    """

                emailext (
                    to: "${EMAIL_RECIPIENT}",
                    subject: emailSubject,
                    body: emailBody,
                    attachLog: true,  // Attach the build log
                    attachBuildLog: true  // Attach the build log
                )
            }
        }
    }
}
