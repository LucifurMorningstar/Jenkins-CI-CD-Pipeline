pipeline {
    agent any
    environment {
        // Define environment variables here if needed
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        // Checkout the code from GitHub
                        checkout([$class: 'GitSCM',
                                  branches: [[name: '*/main']],
                                  userRemoteConfigs: [[url: 'https://github.com/LucifurMorningstar/Jenkins-CI-CD-Pipeline.git']]
                        ])
                    } catch (Exception e) {
                        echo "Checkout failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        // Build the project (use 'sh' for Unix-like systems or 'bat' for Windows)
                        sh 'echo Building the code...' // Replace with your actual build command
                    } catch (Exception e) {
                        echo "Build failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Unit and Integration Tests') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    try {
                        // Run unit and integration tests
                        sh 'echo Running tests...' // Replace with your actual test command
                    } catch (Exception e) {
                        echo "Tests failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Code Analysis') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    try {
                        // Perform code analysis
                        sh 'echo Performing code analysis...' // Replace with your actual analysis command
                    } catch (Exception e) {
                        echo "Code analysis failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Security Scan') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    try {
                        // Perform security scan
                        sh 'echo Performing security scan...' // Replace with your actual scan command
                    } catch (Exception e) {
                        echo "Security scan failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Deploy to Staging') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    try {
                        // Deploy to staging environment
                        sh 'echo Deploying to staging...' // Replace with your actual deploy command
                    } catch (Exception e) {
                        echo "Deployment to staging failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Integration Tests on Staging') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    try {
                        // Run integration tests on staging
                        sh 'echo Running integration tests on staging...' // Replace with your actual test command
                    } catch (Exception e) {
                        echo "Integration tests on staging failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage('Deploy to Production') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    try {
                        // Deploy to production environment
                        sh 'echo Deploying to production...' // Replace with your actual deploy command
                    } catch (Exception e) {
                        echo "Deployment to production failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Send email notifications
                try {
                    emailext (
                        subject: "Build ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                        body: "Build URL: ${env.BUILD_URL}",
                        to: 'dasankalana3@gmai.com',
                        attachmentsPattern: '**/logs/*.log'
                    )
                } catch (Exception e) {
                    echo "Failed to send email: ${e.getMessage()}"
                }
            }
        }
    }
}
